name: Haskell CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: /home/runner/work/MotoRTest/MotoRTest/MotoRoute-OpenStreetMap/wget
        # Look to see if there is a cache hit for the corresponding requirements file
        key: zip
        restore-keys: |
          mkgmap-r4827.zip

    - name: Install dependencies
      working-directory: MotoRoute-OpenStreetMap
      run: | 
        sudo apt-get install osmctools
        sudo apt-get install default-jre
        sudo apt-get install unzip
        
    - name: wget tools
      working-directory: MotoRoute-OpenStreetMap
      run: | 
        mkdir -p wget
        cd wget
        wget -nc https://www.mkgmap.org.uk/download/mkgmap-r4827.zip
        wget -nc https://www.mkgmap.org.uk/download/splitter-r645.zip
        wget -nc https://my.cloudme.com/v1/ws2/:scotti/:MotoRouteOpenStreetMap/mrosm-style-r022.zip
        wget -nc http://download.geofabrik.de/europe/liechtenstein-latest.osm.pbf
        wget -nc http://download.geofabrik.de/europe/liechtenstein.poly
        dirs -l
        ls
 #       wget -nc http://osm.thkukuk.de/data/bounds-latest.zip
 #       wget -nc http://osm.thkukuk.de/data/sea-latest.zip
        
    - name: Run script
      working-directory: MotoRoute-OpenStreetMap
#     "bash" command needed before script name
      run: | 
        bash ./MROSM_1_script.bash
      shell: bash

#    - name: Cache
#      uses: actions/cache@v1
#      env:
#        cache-name: cache-cabal
#      with:
#        path: ~/.cabal
#        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
#        restore-keys: |
#         ${{ runner.os }}-build-${{ env.cache-name }}-
#         ${{ runner.os }}-build-
#         ${{ runner.os }}-
#
#    - name: Install dependencies
#      run: |
#        cabal update
#        cabal build --only-dependencies --enable-tests --enable-benchmarks
#    - name: Build
#      run: cabal build --enable-tests --enable-benchmarks all
#    - name: Run tests
#      run: cabal test all
